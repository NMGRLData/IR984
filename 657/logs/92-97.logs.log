do run
loading script "jan_co2_whiff_120_60_large.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
executed snippet estimated_duration=201.56, duration=0.000243902206421
script duration name:co2_whiff_120_60_large seconds:202.0
loading script "jan_co2_whiff_120_60_large.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=3.38554382324e-05
loading script "jan_co2_whiff_120_60_large.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=4.57763671875e-05
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=8.70227813721e-05
executed snippet estimated_duration=0.0, duration=0.00227808952332
script duration name:co2 seconds:0.0
loading script "jan_co2_whiff_120_60_large.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.000138998031616
executed snippet estimated_duration=4.0, duration=0.00143098831177
Script duration 202.0
Run total estimated duration= 203.000
run duration: 0:03:23
doing event level: 2
08:27:05 -- Setting default integration. t=1.048576
setting integration time = 1.048576
SetIntegrationTime 1.048576 ===>> OK
----------------- start -----------------
**************** Experiment Type: Ar/Ar, Ar/Ar
create new session 4963777136
close session 4963777136
$$$$$ Clearing conditionals
adding conditionals kevin
extract conditionals from file. /Users/jan/PychronDev/scripts/conditionals/kevin.yaml
no attr for this modification cd={'extraction_str': '', 'attr': '', 'mapper': '', 'use_termination': False, 'start_count': 0, 'nskip': 0, 'window': 0, 'frequency': 1, 'teststr': '', 'action': 'Skip Next Run', 'ntrips': 1, 'use_truncation': False}
no attr for this cancelation cd={'mapper': '', 'window': 0, 'frequency': 1, 'attr': '', 'teststr': '', 'start_count': 0, 'ntrips': 1}
adding truncation attr="Ar40" test="Ar40>5000.0" start="10"
adding truncation attr="age" test="age>70.0" start="40"
adding truncation attr="Ar39" test="Ar39.bs_corrected<0.3" start="30"
adding truncation attr="Ar40" test="Ar40.bs_corrected>2000.0" start="20"
adding termination attr="Ar40" test="Ar40>5000.0" start="1"
Invalid conditional kind="pre_run_terminations"
no attr for this action cd={'mapper': '', 'attr': '', 'start_count': 0, 'window': 0, 'frequency': 1, 'teststr': '', 'action': None, 'ntrips': 1}
Invalid conditional kind="post_run_terminations"
Add queue conditionals
add default conditionals
adding default conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
Start automated run 65792-97
loading script "jan_co2_whiff_120_60_large.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
%%%%%%%%%%%%%%%%%% setting automated run 65792-97
No value "sensitivity_multiplier" in metadata
$$$$$$$$$$$$$$$ auto_save_detector_ic=False
============================= Pre Extraction Check =============================
loading queue conditionals pre_run_terminations
loading system conditionals pre_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
08:27:05 -- ******* Pre Extraction Check *******
Get a measurement from the spectrometer
Pre Extraction Termination data. keys=H2,H1,AX,L1,L2,CDD, signals=-0.06565,0.13843,0.12876,0.01162,0.05284,0.00237
08:27:05 -- testing system defined conditionals
Checking default pre extraction terminations n=2
testing CDD
evaluate ot="CDD.inactive" t="CDD", ctx="{'CDD': False}"
GetDeflection CDD ===>> 50
testing CDD==2000
evaluate ot="CDD.deflection==2000" t="CDD==2000", ctx="{'CDD': 50.0}"
08:27:05 -- ******* Pre Extraction Check Passed *******
=================================================================================
08:27:05 -- stopping status monitor
stop 4951479792
Status monitor stopped
Status monitor finished
08:27:07 -- starting status monitor
start 4951479792
StatusMonitor period=1. Frequencies(state=2, checksum=3, lock=5, owner=5)
start extraction
do extraction
Analysis started at 08:27:08.980249
Extraction Started jan_co2.py
08:27:08 -- ******* Extraction Started jan_co2.py *******
state changed from not run to extraction
DO EXTRACTION <pychron.extraction_line.pyscript_runner.RemotePyScriptRunner object at 0x129f9c4d0>
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=5.91278076172e-05
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=0.000102043151855
executed snippet estimated_duration=100.0, duration=0.00247001647949
Jan CO2 laser analysis
doing GOSUB
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=5.19752502441e-05
Waiting for CO2 access
wait ('FelixCO2Flag', 0) {}
waiting for FelixCO2Flag = 0
Read FelixCO2Flag ===>> 0
finished waiting
CO2 free
wait ('CO2PumpTimeFlag', 0) {}
waiting for CO2PumpTimeFlag = 0
Read CO2PumpTimeFlag ===>> 0
finished waiting
acquire ('JanCO2Flag',) {'clear': True}
acquire JanCO2Flag
Set JanCO2Flag 1 ===>> OK
JanCO2Flag acquired
set extraction state False (0.75, 'red', 1.5)
CO2 acquired
executed snippet estimated_duration=0, duration=0.0199348926544
WaitForCO2Access.py completed successfully
gosub finished
doing GOSUB
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=9.79900360107e-05
Prepare for CO2 analysis
close () {'description': 'Jan Inlet'}
close name=--- desc=Jan Inlet
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close R ===>> OK
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=2
08:27:09 -- CLOSE  VALVE-R (Jan Inlet)
-------------------------- close None (Jan Inlet) result=[(True, True)]
action=close, ok=True, locked=[False]
open () {'description': 'Jan Ion Pump'}
open name=--- desc=Jan Ion Pump
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open O ===>> OK
GetIndicatorState O ===>> OK
change switch state (True, True)
update switch state O True args=() kw={} ncanvase=2
08:27:09 -- OPEN   VALVE-O (Jan Ion Pump)
-------------------------- open None (Jan Ion Pump) result=[(True, True)]
action=open, ok=True, locked=[False]
close () {'description': 'Microbone to Minibone'}
close name=--- desc=Microbone to Minibone
checking ownership. requestor=129.138.12.150
check software interlocks L
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close L ===>> OK
GetIndicatorState L ===>> False
change switch state (True, True)
update switch state L False args=() kw={} ncanvase=2
08:27:10 -- CLOSE  VALVE-L (Microbone to Minibone)
-------------------------- close None (Microbone to Minibone) result=[(True, True)]
action=close, ok=True, locked=[False]
open () {'description': 'Microbone to Turbo'}
open name=--- desc=Microbone to Turbo
checking ownership. requestor=129.138.12.150
check software interlocks U
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open U ===>> OK
GetIndicatorState U ===>> OK
change switch state (True, True)
update switch state U True args=() kw={} ncanvase=2
08:27:10 -- OPEN   VALVE-U (Microbone to Turbo)
-------------------------- open None (Microbone to Turbo) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Inlet Pipette'}
open name=--- desc=Microbone to Inlet Pipette
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open S ===>> OK
GetIndicatorState S ===>> OK
change switch state (True, True)
update switch state S True args=() kw={} ncanvase=2
08:27:11 -- OPEN   VALVE-S (Microbone to Inlet Pipette)
-------------------------- open None (Microbone to Inlet Pipette) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter D-50'}
open name=--- desc=Microbone to Getter D-50
checking ownership. requestor=129.138.12.150
check software interlocks K
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open K ===>> OK
GetIndicatorState K ===>> OK
change switch state (True, True)
update switch state K True args=() kw={} ncanvase=2
08:27:12 -- OPEN   VALVE-K (Microbone to Getter D-50)
-------------------------- open None (Microbone to Getter D-50) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter NP-10'}
open name=--- desc=Microbone to Getter NP-10
checking ownership. requestor=129.138.12.150
check software interlocks M
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open M ===>> OK
GetIndicatorState M ===>> OK
change switch state (True, True)
update switch state M True args=() kw={} ncanvase=2
08:27:12 -- OPEN   VALVE-M (Microbone to Getter NP-10)
-------------------------- open None (Microbone to Getter NP-10) result=[(True, True)]
action=open, ok=True, locked=[False]
close () {'description': 'CO2 Laser to Felix'}
close name=--- desc=CO2 Laser to Felix
checking ownership. requestor=129.138.12.150
check software interlocks F
interlocks []
actuate state mode=None-script, software_lock=True
VALVE-F(CO2 Laser to Felix) software locked
change switch state (True, False)
-------------------------- close None (CO2 Laser to Felix) result=[(True, False)]
action=close, ok=True, locked=[True]
open () {'description': 'CO2 Laser to Jan'}
open name=--- desc=CO2 Laser to Jan
checking ownership. requestor=129.138.12.150
check software interlocks A
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open A ===>> OK
GetIndicatorState A ===>> OK
change switch state (True, True)
update switch state A True args=() kw={} ncanvase=2
08:27:13 -- OPEN   VALVE-A (CO2 Laser to Jan)
-------------------------- open None (CO2 Laser to Jan) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to CO2 Laser'}
open name=--- desc=Microbone to CO2 Laser
checking ownership. requestor=129.138.12.150
check software interlocks T
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open T ===>> OK
GetIndicatorState T ===>> OK
change switch state (True, True)
update switch state T True args=() kw={} ncanvase=2
08:27:14 -- OPEN   VALVE-T (Microbone to CO2 Laser)
-------------------------- open None (Microbone to CO2 Laser) result=[(True, True)]
action=open, ok=True, locked=[False]
executed snippet estimated_duration=0, duration=5.19195818901
PrepareForCO2Analysis.py completed successfully
gosub finished
set_motor ('beam', '1.25') {}
setting motor "beam" to 1.25
set motor beam to 1.25
SetMotor beam,1.25 ===>> OK
GetMotorMoving beam ===>> False
GetMotorMoving beam ===>> False
Block completed
move_to_position ('146',) {'autocenter': True}
FusionsCO2 move to position 146
sending GoToHole 146,True
GoToHole 146,True ===>> OK
set states for children of H. state=False
handle state [('H', False)]
update switch state H False args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> False
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
set states for children of C. state=True
set states for children of B. state=True
handle state [('C', True), ('B', True)]
update switch state C True args=() kw={'refresh': True} ncanvase=2
update switch state B True args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> False
Block completed
GetAutoCorrecting ===>> False
GetAutoCorrecting ===>> False
Block completed
update position
GetPosition ===>> 1.99390,-3.98780,1.00000
got position (1.9939, -3.9878, 1.0)
move to position succeeded
sleep (5,) {}
SLEEP 5.0
block started
WaitControl setup for 5.0  
Join finished
block finished. duration 5.0975689888
close () {'description': 'Microbone to Turbo'}
close name=--- desc=Microbone to Turbo
checking ownership. requestor=129.138.12.150
check software interlocks U
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close U ===>> OK
GetIndicatorState U ===>> False
change switch state (True, True)
update switch state U False args=() kw={} ncanvase=2
08:27:25 -- CLOSE  VALVE-U (Microbone to Turbo)
-------------------------- close None (Microbone to Turbo) result=[(True, True)]
action=close, ok=True, locked=[False]
enable laser
enable () {}
set extraction state FusionsCO2 Enabled (False, 'red', 1.5)
enabling laser
Enable ===>> OK
begin interval
BEGIN INTERVAL Interval 1 waiting for 30.0
block started
set extract to 4.5
WaitControl setup for 30.0  
extract (4.5,) {}
GetPosition ===>> 1.99390,-3.98780,1.00000
set extraction state FusionsCO2 ON! 4.5(watts) (0.75, 'red', 1.5)
extract sample to 4.5 (watts)
set laser output
SetLaserOutput 4.5,watts ===>> OK
executing pattern triangle.lp
execute_pattern ('triangle.lp',) {}
executing pattern triangle.lp
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> OK
IsPatterning ===>> False
IsPatterning ===>> False
Block completed
COMPLETE INTERVAL waiting for Interval 1 to complete
Join finished
block finished. duration 30.1241760254
Interval 1 finished
end_extract () {}
ending extraction. set laser power to 0
set laser power 0
SetLaserPower 0 ===>> OK
disable () {}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% disable
set extraction state False (0.75, 'red', 1.5)
disabling laser
Disable ===>> OK
sleep (30.0,) {}
SLEEP 30.0
block started
WaitControl setup for 30.0  
Join finished
block finished. duration 30.2206389904
executed snippet estimated_duration=166.0, duration=77.4342491627
jan_co2.py completed successfully
GetAchievedOutput ===>> No Response
Requested Output= 0.000
Achieved Output=  0.000
GetResponseBlob ===>> No Response
GetOutputBlob ===>> No Response
persistence save...
persistence save - db
AutomatedRunPersister post_extraction_save deprecated
persistence save - dvc
no extraction position for 146
not connected to db mysql://janexp@129.138.12.160/labspy
Enviromentals: {'lab_humiditys': [{'device': 'EnvironmentalMonitor',
                    'name': 'Lab Hum.',
                    'pub_date': '2017-08-21T08:28:17',
                    'title': 'iServer Hum.',
                    'value': 58.9}],
 'lab_pneumatics': [{'device': 'AirPressure',
                     'name': 'Pressure',
                     'pub_date': '2017-08-21T08:28:00',
                     'title': None,
                     'value': 83.625},
                    {'device': 'AirPressure2',
                     'name': 'Pressure2',
                     'pub_date': '2017-08-21T08:28:00',
                     'title': None,
                     'value': 83.93086}],
 'lab_temperatures': [{'device': 'EnvironmentalMonitor',
                       'name': 'Lab Temp.',
                       'pub_date': '2017-08-21T03:58:50',
                       'title': 'iServer Temp.',
                       'value': 71.4},
                      {'device': 'Chiller',
                       'name': 'Coolant Temp.',
                       'pub_date': '2017-08-21T08:07:32',
                       'title': None,
                       'value': 18.0}]}
Extraction Finished
08:28:28 -- ******* Extraction Finished *******
no overlap. not waiting for min ms pumptime
08:28:29 -- Sending spectrometer configuration
======== Sending configuration ========
SetDeflection CDD,50.0 ===>> OK
SetDeflection H2,0.0 ===>> OK
SetDeflection H1,0.0 ===>> OK
SetDeflection L2,825.0 ===>> OK
SetDeflection L1,400.0 ===>> OK
SetDeflection AX,190.0 ===>> OK
SetZFocus 74.64 ===>> OK
SetZSymmetry -50.72 ===>> OK
SetExtractionLens 26.13 ===>> OK
SetIonRepeller -3.81 ===>> OK
SetElectronEnergy 75.08 ===>> OK
SetYSymmetry -2.81 ===>> OK
SetIonCounterVoltage 1590.0 ===>> OK
send trap current 200.0
GetParameter Trap Current Readback ===>> 198.482695477019
SetParameter Trap Current Set,200.0 ===>> OK
updating mftable name mftable
Using mftable located at /Users/jan/PychronDev/setupfiles/spectrometer/mftables/mftable.csv
============ MFtable ===========
Isotope  H2     H1     AX     L1     L2     CDD    
Ar40     6.0545 5.8781 5.9919 6.1930 6.2293 6.6783
Ar39     6.0094 5.7691 6.0560 6.3361 6.1121 6.5648
Ar36     5.6869 5.4381 5.7194 5.9950 5.7670 6.2159
================================
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
======== Configuration Finished ========
GetYSymmetry ===>> -2.81
GetZSymmetry ===>> -50.72
GetParameter Trap Current Readback ===>> 198.147042666178
GetHighVoltage ===>> 4500
start measurement
do measurement
L#=65792 analysis type=unknown
Measurement Started jan_co2_whiff_120_60_large.py
08:28:29 -- ******* Measurement Started jan_co2_whiff_120_60_large.py *******
state changed from extraction to measurement
setting trap, emission, spec, defl, and gains
GetExtractionLens ===>> 26.13
GetYSymmetry ===>> -2.81
GetZSymmetry ===>> -50.72
GetZFocus ===>> 74.64
GetDeflection H2 ===>> 0
GetDeflection H1 ===>> 0
GetDeflection AX ===>> 190
GetDeflection L1 ===>> 400
GetDeflection L2 ===>> 825
GetDeflection CDD ===>> 50
GetGain H2 ===>> 0.0113
GetGain H1 ===>> 0.1
GetGain AX ===>> 0.09645
GetGain L1 ===>> 0.010309
GetGain L2 ===>> 0.091218
GetGain CDD ===>> 0
GetParameter Trap Current Readback ===>> 197.811389855338
GetParameter Source Current Readback ===>> 550.711774400293
pre measurement save
New frame /Users/jan/PychronDev/data/isotopes/a6/94245e-243c-43c0-9cf9-14557ba0468b.h5
flush and close file /Users/jan/PychronDev/data/isotopes/a6/94245e-243c-43c0-9cf9-14557ba0468b.h5
testing...
no interpolation path defined
executed snippet estimated_duration=201.56, duration=0.000163078308105
co2 whiff measurement script
activate_detectors ('H2', 'H1', 'AX', 'L1', 'L2', 'CDD') {}
activate detectors
*************** Set Analysis View Ar/Ar
create graphs
clearing graphs
clear isotope group
setting isotope det=H2, iso=Ar41
setting isotope det=H1, iso=Ar40
setting isotope det=AX, iso=Ar39
setting isotope det=L1, iso=Ar38
setting isotope det=L2, iso=Ar37
setting isotope det=CDD, iso=Ar36
setting previous blanks
 - setting Ar41 blank 0.011+/-0.004
 - setting Ar40 blank 0.548+/-0.009
 - setting Ar36 blank 0.00431+/-0.00020
 - setting Ar37 blank 0.045+/-0.011
 - setting Ar38 blank 0.014+/-0.005
 - setting Ar39 blank 0.033+/-0.012
load analysis view
position_magnet ('Ar40',) {'detector': 'H1'}
detector Detector(H1)
POSITION Ar40 H1
setting detector H2 to Ar41 (40.9624)
setting detector H1 to Ar40 (39.9624)
setting detector AX to Ar39 (38.9624)
setting detector L1 to Ar38 (37.9624)
setting detector L2 to Ar37 (36.9624)
setting detector CDD to Ar36 (35.9624)
Mapping mass to dac mass func: "parabolic"
H1 map mass coeffs = [ -3.11428344e-04   1.33794662e-01   1.02868323e+00]
H1 map mass to dac 39.9624 >> 5.87809
GetDeflection H1 ===>> 0
GetHighVoltage ===>> 4500
positioning Ar40 (5.87809) on H1
setting magnet DAC
current  : 5.878090
requested: 5.878090
Delta Dac: 0.000000
Checking detector protection. dv=0.00000
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87809 ===>> OK
Magnet settling time: 0.500 0.500
Magnet settling complete
set_dac. change=True
close ('S',) {}
close name=S desc=---
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
update labels <pychron.experiment.plot_panel.PlotPanel object at 0x1b4a79b30>
update labels "<pychron.graph.stacked_regression_graph.StackedRegressionGraph object at 0x1b4cd56b0>"
setting label 0 H2 Ar41
setting label 1 H1 Ar40
setting label 2 AX Ar39
setting label 3 L1 Ar38
setting label 4 L2 Ar37
setting label 5 CDD Ar36
update labels "<pychron.graph.stacked_graph.StackedGraph object at 0x1b4a408f0>"
setting label 0 H2 Ar41
setting label 1 H1 Ar40
setting label 2 AX Ar39
setting label 3 L1 Ar38
setting label 4 L2 Ar37
setting label 5 CDD Ar36
Close S ===>> OK
set states for children of S. state=False
handle state [('S', False)]
update switch state S False args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
GetIndicatorState S ===>> False
change switch state (True, True)
update switch state S False args=() kw={} ncanvase=2
08:28:31 -- CLOSE  VALVE-S (Microbone to Inlet Pipette)
-------------------------- close S () result=[(True, True)]
action=close, ok=True, locked=[False]
equilibrate () {'do_post_equilibration': False, 'inlet': 'R', 'outlet': 'O', 'eqtime': 4}
Equilibration Started
08:28:31 -- ******* Equilibration Started *******
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close O ===>> OK
GetIndicatorState O ===>> False
change switch state (True, True)
update switch state O False args=() kw={} ncanvase=2
08:28:31 -- CLOSE  VALVE-O (Jan Ion Pump)
waiting 3s before opening inlet value ('R',)
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open R ===>> OK
GetIndicatorState R ===>> OK
change switch state (True, True)
update switch state R True args=() kw={} ncanvase=2
08:28:34 -- OPEN   VALVE-R (Jan Inlet)
equilibrating for 4sec
set_time_zero (0,) {}
sniff (4,) {}
py_sniff
build tables- sniff [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group /sniff/Ar41 (Group) '' table H2
add group /sniff/Ar40 (Group) '' table H1
add group /sniff/Ar39 (Group) '' table AX
add group /sniff/Ar38 (Group) '' table L1
add group /sniff/Ar37 (Group) '' table L2
add group /sniff/Ar36 (Group) '' table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/a6/94245e-243c-43c0-9cf9-14557ba0468b.h5
measuring sniff. ncounts=4
"sniff" increment series count="1" fit count="0" regressing="False"
starting measurement
Equilibration Finished
08:28:39 -- ******* Equilibration Finished *******
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close R ===>> OK
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=2
08:28:39 -- CLOSE  VALVE-R (Jan Inlet)
waiting for write to finish
measurement finished
estimated time: 4.194 actual time: :4.312
flush and close file /Users/jan/PychronDev/data/isotopes/a6/94245e-243c-43c0-9cf9-14557ba0468b.h5
set_fits () {}
using default fits file=/Users/jan/PychronDev/scripts/measurement/fits/nominal_linear.yaml
set "Ar41" to "('Average', 'SEM')"
set "Ar40" to "('Linear', 'SEM')"
set "Ar36" to "('Linear', 'SEM')"
set "Ar37" to "('linear', 'SEM')"
set "Ar38" to "('linear', 'SEM')"
set "Ar39" to "('Linear', 'SEM')"
set_baseline_fits () {}
using default fits file=/Users/jan/PychronDev/scripts/measurement/fits/nominal_linear.yaml
set "H2" to "('average', 'SEM')"
set "H1" to "('average', 'SEM')"
set "CDD" to "('average', 'SEM')"
set "L2" to "('average', 'SEM')"
set "L1" to "('average', 'SEM')"
set "AX" to "('average', 'SEM')"
whiff () {'ncounts': 1, 'conditionals': [{'action': 'run_remainder', 'attr': 'Ar40', 'teststr': 'Ar40.cur<=175'}, {'action': 'run_pipette', 'attr': 'Ar40', 'teststr': 'Ar40.cur>500'}, {'action': 'run_chamber_split', 'attr': 'Ar40', 'teststr': 'Ar40.cur>=300'}, {'action': 'pump', 'attr': 'Ar40', 'teststr': 'Ar40.cur>175'}]}
build tables- whiff [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group /whiff/Ar41 (Group) '' table H2
add group /whiff/Ar40 (Group) '' table H1
add group /whiff/Ar39 (Group) '' table AX
add group /whiff/Ar38 (Group) '' table L1
add group /whiff/Ar37 (Group) '' table L2
add group /whiff/Ar36 (Group) '' table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/a6/94245e-243c-43c0-9cf9-14557ba0468b.h5
measuring whiff. ncounts=1
"whiff" increment series count="2" fit count="1" regressing="True"
starting measurement
testing Ar40<=175
evaluate ot="Ar40.cur<=175" t="Ar40<=175", ctx="{'Ar40': 8.4001077103647095}"
condition Ar40<=175 is true trips=1/1
08:28:41 -- Conditional tripped: Ar40.cur<=175 condition Ar40<=175 is True
waiting for write to finish
measurement finished
estimated time: 1.049 actual time: :1.131
flush and close file /Users/jan/PychronDev/data/isotopes/a6/94245e-243c-43c0-9cf9-14557ba0468b.h5
WHIFF Result=run_remainder
Whiff result=run_remainder
open ('R',) {}
open name=R desc=---
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open R ===>> OK
GetIndicatorState R ===>> OK
change switch state (True, True)
update switch state R True args=() kw={} ncanvase=2
08:28:42 -- OPEN   VALVE-R (Jan Inlet)
-------------------------- open R () result=[(True, True)]
action=open, ok=True, locked=[False]
open ('S',) {}
open name=S desc=---
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open S ===>> OK
GetIndicatorState S ===>> OK
change switch state (True, True)
update switch state S True args=() kw={} ncanvase=2
08:28:43 -- OPEN   VALVE-S (Microbone to Inlet Pipette)
-------------------------- open S () result=[(True, True)]
action=open, ok=True, locked=[False]
sleep (12.0,) {}
SLEEP 12.0
block started
WaitControl setup for 12.0  
Join finished
block finished. duration 12.0738449097
close ('R',) {}
close name=R desc=---
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close R ===>> OK
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=2
08:28:56 -- CLOSE  VALVE-R (Jan Inlet)
-------------------------- close R () result=[(True, True)]
action=close, ok=True, locked=[False]
post_equilibration () {}
multicollect () {'integration_time': 1, 'ncounts': 120.0}
Post Equilibration Started jan_pump_extraction_line.py
08:28:56 -- ******* Post Equilibration Started jan_pump_extraction_line.py *******
build tables- signal [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
testing...
no interpolation path defined
add group /signal/Ar41 (Group) '' table H2
add group /signal/Ar40 (Group) '' table H1
calculate duration
add group /signal/Ar39 (Group) '' table AX
testing...
add group /signal/Ar38 (Group) '' table L1
no interpolation path defined
add group /signal/Ar37 (Group) '' table L2
executed snippet estimated_duration=4.0, duration=0.000322818756104
add group /signal/Ar36 (Group) '' table CDD
executed snippet estimated_duration=4.0, duration=0.012717962265
flush and close file /Users/jan/PychronDev/data/isotopes/a6/94245e-243c-43c0-9cf9-14557ba0468b.h5
Pump after analysis
measuring signal. ncounts=120.0
doing GOSUB
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.000147819519043
Pump Microbone
close () {'description': 'Jan Inlet'}
close name=--- desc=Jan Inlet
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
"signal" increment series count="2" fit count="1" regressing="True"
Close R ===>> OK
GetIndicatorState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=2
08:28:56 -- CLOSE  VALVE-R (Jan Inlet)
-------------------------- close None (Jan Inlet) result=[(True, True)]
starting measurement
action=close, ok=True, locked=[False]
is_closed ('F',) {}
is F () closed?
is closed True
open () {'description': 'CO2 Laser to Jan'}
open name=--- desc=CO2 Laser to Jan
checking ownership. requestor=129.138.12.150
check software interlocks A
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open A ===>> OK
GetIndicatorState A ===>> OK
change switch state (True, True)
update switch state A True args=() kw={} ncanvase=2
08:28:57 -- OPEN   VALVE-A (CO2 Laser to Jan)
-------------------------- open None (CO2 Laser to Jan) result=[(True, True)]
action=open, ok=True, locked=[False]
sleep (1,) {}
SLEEP 1.0
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 8.071070337719442}"
close () {'description': 'CO2 Laser to Roughing'}
close name=--- desc=CO2 Laser to Roughing
checking ownership. requestor=129.138.12.150
check software interlocks G
interlocks []
actuate state mode=None-script, software_lock=True
VALVE-G(CO2 Laser to Roughing) software locked
change switch state (True, False)
-------------------------- close None (CO2 Laser to Roughing) result=[(True, False)]
action=close, ok=True, locked=[True]
open () {'description': 'Microbone to Turbo'}
open name=--- desc=Microbone to Turbo
checking ownership. requestor=129.138.12.150
check software interlocks U
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open U ===>> OK
GetIndicatorState U ===>> OK
change switch state (True, True)
update switch state U True args=() kw={} ncanvase=2
08:28:58 -- OPEN   VALVE-U (Microbone to Turbo)
-------------------------- open None (Microbone to Turbo) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter NP-10'}
open name=--- desc=Microbone to Getter NP-10
checking ownership. requestor=129.138.12.150
check software interlocks M
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open M ===>> OK
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 221.85577610605154}"
GetIndicatorState M ===>> OK
change switch state (True, True)
update switch state M True args=() kw={} ncanvase=2
08:28:59 -- OPEN   VALVE-M (Microbone to Getter NP-10)
-------------------------- open None (Microbone to Getter NP-10) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter D-50'}
open name=--- desc=Microbone to Getter D-50
checking ownership. requestor=129.138.12.150
check software interlocks K
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open K ===>> OK
GetIndicatorState K ===>> OK
change switch state (True, True)
update switch state K True args=() kw={} ncanvase=2
08:28:59 -- OPEN   VALVE-K (Microbone to Getter D-50)
-------------------------- open None (Microbone to Getter D-50) result=[(True, True)]
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 220.92421283160323}"
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to CO2 Laser'}
open name=--- desc=Microbone to CO2 Laser
checking ownership. requestor=129.138.12.150
check software interlocks T
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open T ===>> OK
GetIndicatorState T ===>> OK
change switch state (True, True)
update switch state T True args=() kw={} ncanvase=2
08:29:00 -- OPEN   VALVE-T (Microbone to CO2 Laser)
-------------------------- open None (Microbone to CO2 Laser) result=[(True, True)]
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Inlet Pipette'}
open name=--- desc=Microbone to Inlet Pipette
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 224.41325879161732}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
Open S ===>> OK
GetIndicatorState S ===>> OK
change switch state (True, True)
update switch state S True args=() kw={} ncanvase=2
08:29:01 -- OPEN   VALVE-S (Microbone to Inlet Pipette)
-------------------------- open None (Microbone to Inlet Pipette) result=[(True, True)]
action=open, ok=True, locked=[False]
sleep (1,) {}
SLEEP 1.0
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.1929267584754}"
set_resource () {'name': 'CO2PumpTimeFlag', 'value': 30}
Set CO2PumpTimeFlag 30 ===>> OK
release ('JanCO2Flag',) {}
release JanCO2Flag
Set JanCO2Flag 0 ===>> OK
executed snippet estimated_duration=6.0, duration=6.63643217087
PumpMicrobone.py completed successfully
gosub finished
get_resource_value () {'name': 'JanMiniboneFlag'}
Read JanMiniboneFlag ===>> 0
Get Resource Value JanMiniboneFlag=0.0
get resource value 0.0
get_resource_value () {'name': 'JanMiniboneFlag'}
Read JanMiniboneFlag ===>> 0
Get Resource Value JanMiniboneFlag=0.0
executed snippet estimated_duration=4.0, duration=6.67382311821
jan_pump_extraction_line.py completed successfully
Post Equilibration Finished
08:29:03 -- ******* Post Equilibration Finished *******
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.22027273345506}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.19592907300716}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.07991102340324}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.02584372075086}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.30479567843713}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.30479567843713}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.0113974847999}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.0113974847999}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 224.99423767924958}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 224.99423767924958}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.06404139481143}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.06404139481143}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.1035733637169}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.1035733637169}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.36453535511703}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.36453535511703}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.4010422977265}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.4010422977265}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.3201501439366}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.3201501439366}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.32603284246667}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.32603284246667}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.39937715078898}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.39937715078898}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.47083593147985}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.01846015621766}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.47083593147985}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.510954176546}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.0585784012838}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.510954176546}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.51914710591254}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.06677133065034}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.51914710591254}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.54696338810047}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.09458761283827}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.54696338810047}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.59167467752488}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.13929890226268}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.59167467752488}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
08:29:22 -- collecting point 25
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.63885633059255}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.18648055533035}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.63885633059255}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.64452418455775}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.19214840929556}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.64452418455775}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.65500277804097}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.20262700277877}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.65500277804097}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.61817275926018}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.16579698399798}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.61817275926018}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.59516245291223}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.14278667765004}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.59516245291223}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.59942209263258}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.851912757676384}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.14704631737038}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.59942209263258}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.58739033754432}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.82692261897161}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.13501456228212}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.58739033754432}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6019106767179}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.83249402570529}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.1495349014557}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6019106767179}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.5804570374263}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.827523501833877}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.1280812621641}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.5804570374263}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6070354398809}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.810842760370182}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.1546596646187}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6070354398809}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.63552125318967}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.798776785295672}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.18314547792747}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.63552125318967}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.61451624872905}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.812178137906805}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.16214047346685}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.61451624872905}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.57302706569686}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.786785411195353}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.12065129043467}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.57302706569686}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.57627005238075}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.773325017968016}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.12389427711855}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.57627005238075}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.5758553581446}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.77425210918803}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.1234795828824}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.5758553581446}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.58209969120068}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.68830025911285}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.77119586300224}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.12972391593848}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.58209969120068}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.5778377088354}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.68830025911285}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.75396042724302}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.1254619335732}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.5778377088354}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.5642383517042}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.68830025911285}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.73726365403154}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.111862576442}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.5642383517042}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.5583632276507}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.68830025911285}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.74067689528783}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.1059874523885}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.5583632276507}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.5829088526332}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.68830025911285}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.757246958427547}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.130533077371}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.5829088526332}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.59954254762533}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.72364589998708}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.7684446978629}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.14716677236314}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.59954254762533}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6111829042053}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.72364589998708}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.779261078969018}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.1588071289431}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6111829042053}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.62878362380985}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.72364589998708}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.778938746281558}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.17640784854765}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.62878362380985}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.64733801648535}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.72364589998708}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.76764478037848}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.19496224122315}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.64733801648535}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6640929345543}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.72364589998708}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.761511438193455}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2117171592921}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6640929345543}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
08:29:48 -- collecting point 50
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.65954172599118}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.76396276879194}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.75595086227703}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.20716595072898}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.65954172599118}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6560040888703}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.76396276879194}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.75587289620196}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2036283136081}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6560040888703}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.67486044030338}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.76396276879194}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.754375228071922}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.22248466504118}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.67486044030338}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6693539775669}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.76396276879194}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.755209653506856}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.21697820230472}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6693539775669}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.68947572203953}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.76396276879194}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.74885970848736}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.23709994677733}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.68947572203953}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70221931370304}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.784717798421074}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.7506086536974}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.24984353844084}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70221931370304}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71139469620013}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.784717798421074}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.750868212299224}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.25901892093793}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71139469620013}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72275779715594}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.784717798421074}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.746658156484173}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.27038202189374}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72275779715594}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7207793395705}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.784717798421074}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.74084082050063}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2684035643083}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7207793395705}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72451630222176}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.784717798421074}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.73314120280291}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.27214052695956}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72451630222176}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.734723291066}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.841491377972826}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.730069603648356}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2823475158038}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.734723291066}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73092451669623}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.841491377972826}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.732802586060277}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.27854874143404}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73092451669623}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72125652850116}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.841491377972826}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.730507338411275}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.26888075323896}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72125652850116}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71375737797277}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.841491377972826}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.730254108016933}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.26138160271057}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71375737797277}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71766616060088}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.841491377972826}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.721022526535457}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2652903853387}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71766616060088}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70384020641998}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.852550409055272}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.71955176859453}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.25146443115779}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70384020641998}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.696267062681}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.852550409055272}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.717992216759264}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2438912874188}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.696267062681}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70110745249255}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.852550409055272}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.714272941644897}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.24873167723035}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70110745249255}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7073560237439}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.852550409055272}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.71809486920641}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2549802484817}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7073560237439}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70014688759704}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.852550409055272}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.718265060025054}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.24777111233485}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70014688759704}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6946363786585}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.873440674628778}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.709172769050777}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2422606033963}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6946363786585}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6994257385688}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.873440674628778}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.70622236805691}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2470499633066}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6994257385688}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70830576932147}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.873440674628778}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.69979112565748}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.25592999405927}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70830576932147}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7045779496559}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.873440674628778}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.702199887935723}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.25220217439372}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7045779496559}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7029424904015}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.873440674628778}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.70008349642874}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2505667151393}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7029424904015}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
08:30:14 -- collecting point 75
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70321872427485}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.88701682772756}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.703070398136106}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.25084294901265}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70321872427485}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.69964622685623}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.88701682772756}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.704835616987598}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.24727045159403}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.69964622685623}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70022288688645}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.88701682772756}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.70150785418316}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.24784711162425}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70022288688645}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.69579613142076}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.88701682772756}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.697721351362247}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.24342035615857}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.69579613142076}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.69350665591682}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.88701682772756}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.69374207672601}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.24113088065462}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.69350665591682}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar36<0.001
evaluate ot="Ar36.bs_corrected<0.001" t="Ar36<0.001", ctx="{'Ar36': 0.039123803561606586}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.67940601000737}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.894937318990337}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.695500551121416}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.22703023474517}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.67940601000737}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6805743190778}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.894937318990337}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.691844879165703}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2281985438156}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.6805743190778}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.68769052511965}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.894937318990337}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.68378956783476}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.23531474985745}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.68769052511965}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.69405041190615}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.894937318990337}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.681228606487657}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.24167463664395}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.69405041190615}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.69898325001722}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.894937318990337}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.681192440110767}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.24660747475502}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.69898325001722}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar36<0.001
evaluate ot="Ar36.bs_corrected<0.001" t="Ar36<0.001", ctx="{'Ar36': 0.03904286640463338}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70674733073054}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.926911567387446}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.679521326696953}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.25437155546834}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.70674733073054}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7118990419069}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.926911567387446}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.6776232205053}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2595232666447}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7118990419069}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7133180382573}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.926911567387446}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.680861150963306}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.26094226299512}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7133180382573}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71120158900027}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.926911567387446}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.682735245065242}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.25882581373807}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71120158900027}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71328944166734}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.926911567387446}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.682625615173325}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.26091366640514}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71328944166734}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar36<0.001
evaluate ot="Ar36.bs_corrected<0.001" t="Ar36<0.001", ctx="{'Ar36': 0.038495104215346805}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71325763686806}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.942643681840543}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.682209035477992}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.26088186160587}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71325763686806}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7178170217309}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.942643681840543}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.678008619025533}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2654412464687}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7178170217309}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72107082702234}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.942643681840543}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.677370162611897}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.26869505176015}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72107082702234}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72222059119514}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.942643681840543}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.676472031184744}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.26984481593294}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72222059119514}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71951081714266}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.942643681840543}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.673613825542194}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.26713504188046}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71951081714266}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar36<0.001
evaluate ot="Ar36.bs_corrected<0.001" t="Ar36<0.001", ctx="{'Ar36': 0.03825515451821539}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71703105514442}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.965278709154752}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.668760918470504}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.26465527988222}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71703105514442}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71526566957752}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.965278709154752}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.667044167951282}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.26288989431532}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71526566957752}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71913443968637}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.965278709154752}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.665840558422648}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.26675866442417}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71913443968637}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.721039376763}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.965278709154752}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.664439213905812}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2686636015008}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.721039376763}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72273305326692}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.965278709154752}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.662987629223224}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.27035727800472}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72273305326692}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar36<0.001
evaluate ot="Ar36.bs_corrected<0.001" t="Ar36<0.001", ctx="{'Ar36': 0.038055582449311356}"
08:30:41 -- collecting point 100
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73045917474403}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.977367982771295}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.663629638640128}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.27808339948183}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73045917474403}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7361175769494}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.977367982771295}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66398980389953}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2837418016872}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7361175769494}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7346392640603}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.977367982771295}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66415110772446}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2822634887981}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7346392640603}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73710647875828}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.977367982771295}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.664105307824368}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28473070349608}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73710647875828}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73697460570227}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.977367982771295}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.668629463268694}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28459883044007}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73697460570227}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar36<0.001
evaluate ot="Ar36.bs_corrected<0.001" t="Ar36<0.001", ctx="{'Ar36': 0.03785408540188093}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7387701828135}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.980089875983477}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.670074860532687}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2863944075513}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7387701828135}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73795906688696}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.980089875983477}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66913862557671}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28558329162476}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73795906688696}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74514152829815}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.980089875983477}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66798113290835}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.29276575303595}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74514152829815}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74465556435138}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.980089875983477}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.660433335900844}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.29227978908918}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74465556435138}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74602262310066}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.980089875983477}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.656276304506946}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.29364684783846}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74602262310066}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar36<0.001
evaluate ot="Ar36.bs_corrected<0.001" t="Ar36<0.001", ctx="{'Ar36': 0.037736252260347235}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7501544864569}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.995920252792477}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.65892040345808}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2977787111947}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7501544864569}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7526096805734}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.995920252792477}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66121747146035}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.30023390531122}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7526096805734}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74736203181527}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.995920252792477}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.663281980696258}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.29498625655307}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74736203181527}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7463814091415}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.995920252792477}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.665530444823922}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2940056338793}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7463814091415}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74613031278614}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.995920252792477}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.665426586521644}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.29375453752394}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74613031278614}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar36<0.001
evaluate ot="Ar36.bs_corrected<0.001" t="Ar36<0.001", ctx="{'Ar36': 0.03778736015647173}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73982305006984}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.985807309499506}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.666759460699723}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28744727480765}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73982305006984}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73213408969372}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.985807309499506}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.667810656215398}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.27975831443152}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73213408969372}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72290143562407}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.985807309499506}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.669032398036773}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.27052566036187}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72290143562407}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72103218926728}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.985807309499506}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.668304377333733}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.26865641400508}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72103218926728}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7178277951094}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.985807309499506}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66739361460998}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2654520198472}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7178277951094}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10643167721848597}"
testing Ar36<0.001
evaluate ot="Ar36.bs_corrected<0.001" t="Ar36<0.001", ctx="{'Ar36': 0.03764763365128872}"
waiting for write to finish
measurement finished
estimated time: 125.829 actual time: :126.350
flush and close file /Users/jan/PychronDev/data/isotopes/a6/94245e-243c-43c0-9cf9-14557ba0468b.h5
baselines () {'settling_time': 15.0, 'detector': 'H1', 'mass': 34.2, 'ncounts': 60.0}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Baseline
build tables- baseline [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group baseline table H2
add group baseline table H1
add group baseline table AX
add group baseline table L1
add group baseline table L2
add group baseline table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/a6/94245e-243c-43c0-9cf9-14557ba0468b.h5
detector Detector(H1)
POSITION 34.2 H1
Mapping mass to dac mass func: "parabolic"
H1 map mass coeffs = [ -3.11428344e-04   1.33794662e-01   1.02868323e+00]
H1 map mass to dac 34.2 >> 5.24020160773
GetDeflection H1 ===>> 0
GetHighVoltage ===>> 4500
positioning 34.2 (5.24020160773) on H1
setting magnet DAC
current  : 5.878090
requested: 5.240202
Delta Dac: 0.637888
Checking detector protection. dv=0.63789
Checking detector "CDD". Protection Threshold: 0.5 (V)
ProtectDetector CDD,On ===>> OK
GetDeflection CDD ===>> 2000
Protected = 2000
SetMagnetDAC 5.24020160773 ===>> OK
Magnet settling time: 0.500 0.500
Magnet settling complete
Wait for magnet to stop moving
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> False
Magnet move complete
Unprotect detectors
ProtectDetector CDD,Off ===>> OK
GetDeflection CDD ===>> 50
set_dac. change=True
Delaying 15.0s for detectors to settle
Join finished
measuring baseline. ncounts=60.0
"baseline" increment series count="2" fit count="1" regressing="True"
starting measurement
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7206012606433}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71194457969196}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73859043547628}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.72538732235927}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.10164561550253276}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.71940813405706}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73408568053492}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74262160452275}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74473734900297}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74947232344232}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.07756061441947469}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74879116589085}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74879116589085}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74821217019363}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74821217019363}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7494648353344}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7494648353344}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74990928245006}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74990928245006}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74784174019453}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74784174019453}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.07919119766725642}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74940752281057}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74940752281057}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74456692989776}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74456692989776}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7402501839405}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7402501839405}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73837872828793}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73837872828793}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73758457830598}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73758457830598}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.0894483595558164}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73672609645394}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28435032119174}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73672609645394}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73468696646754}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28231119120534}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73468696646754}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7362327131853}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2838569379231}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7362327131853}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73437678609704}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28200101083485}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73437678609704}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73729534094903}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28491956568683}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73729534094903}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08973759691276277}"
08:31:47 -- collecting point 25
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7381463164891}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2857705412269}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7381463164891}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7399673183103}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2875915430481}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7399673183103}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74175984105875}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28938406579655}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.74175984105875}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73971829528995}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28734252002775}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73971829528995}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7381413849153}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2857656096531}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7381413849153}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08889155294647502}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.738114317472}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.67120075601484}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2857385422098}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.738114317472}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7365630884857}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.67013810776026}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2841873132235}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7365630884857}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7351863748087}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.666234939740974}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2828105995465}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7351863748087}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73361103962708}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.668300606912904}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28123526436488}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73361103962708}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73450855445765}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66630485273909}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28213277919545}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73450855445765}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.09252438340414221}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73478747696814}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66604754068416}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28241170170594}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73478747696814}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73626979286698}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66747734213732}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28389401760478}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73626979286698}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73667782213204}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66739516059506}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28430204686984}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73667782213204}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73750119657166}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66792683514769}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28512542130946}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73750119657166}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73831016851082}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66742191114966}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28593439324862}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73831016851082}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08872276935097849}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7377980701498}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99107229656983}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.665488686807688}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2854222948876}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7377980701498}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7378680919922}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99107229656983}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.664843950114395}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28549231673}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7378680919922}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7362919848557}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99107229656983}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.666210921462646}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2839162095935}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7362919848557}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73660983718705}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99107229656983}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66635467678463}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28423406192485}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73660983718705}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7348841292216}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99107229656983}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.665832775539556}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2825083539594}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7348841292216}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.09214880864017606}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7338422061148}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.988756197260706}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.66690430340246}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2814664308526}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7338422061148}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73466230913965}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.988756197260706}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.666328709242865}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28228653387745}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73466230913965}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7345172954162}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.988756197260706}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.6641316386465}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.282141520154}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7345172954162}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7336117778262}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.988756197260706}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.661413878319486}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28123600256401}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7336117778262}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73391133342122}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.988756197260706}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.661315073614105}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28153555815902}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73391133342122}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.09312160444056716}"
08:32:13 -- collecting point 50
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73552273753603}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99378430719336}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.6622918943875}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28314696227383}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73552273753603}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73632042881016}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99378430719336}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.660852493297167}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28394465354796}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73632042881016}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73746755359005}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99378430719336}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.65982891030422}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28509177832785}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73746755359005}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7379937266386}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99378430719336}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.65973591884266}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2856179513764}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7379937266386}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73893779495512}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99378430719336}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.65996859003417}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28656201969292}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73893779495512}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08809514290666642}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7385394158157}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99753316450262}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.659168632585057}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.2861636405535}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.7385394158157}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73875633891532}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99753316450262}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.659489800259525}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28638056365313}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73875633891532}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73840777103968}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99753316450262}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.659205342202632}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28603199577748}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73840777103968}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73851050351337}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99753316450262}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.659579602256706}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28613472825117}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73851050351337}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73974582865551}"
testing age>70.0
evaluate ot="age>70.0" t="age>70.0", ctx="{'age': 28.99753316450262}"
testing Ar39<0.3
evaluate ot="Ar39.bs_corrected<0.3" t="Ar39<0.3", ctx="{'Ar39': 26.659925152623817}"
testing Ar40>2000.0
evaluate ot="Ar40.bs_corrected>2000.0" t="Ar40>2000.0", ctx="{'Ar40': 226.28737005339332}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 225.73974582865551}"
testing H1<-5.0
evaluate ot="H1.bs<-5.0" t="H1<-5.0", ctx="{'H1': 0.08728710920626381}"
waiting for write to finish
measurement finished
estimated time: 62.915 actual time: :63.284
flush and close file /Users/jan/PychronDev/data/isotopes/a6/94245e-243c-43c0-9cf9-14557ba0468b.h5
activate_detectors ('H1', 'AX', 'CDD') {'peak_center': True}
peak_center () {'detector': 'H1', 'isotope': 'Ar40'}
peak center: mean=218.821982665 threshold=5.0
peak center started
setup peak center. detector=['H1', 'AX', 'CDD'], isotope=Ar40
VersionedUnpickler [<apptools.sweet_pickle.versioned_unpickler.VersionedUnpickler object at 0x19b9de650>] using Updater [<apptools.sweet_pickle.updater.Updater object at 0x12f3c7bf0>]
VersionedUnpickler [<apptools.sweet_pickle.versioned_unpickler.VersionedUnpickler object at 0x19b9de650>] using Updater [<apptools.sweet_pickle.updater.Updater object at 0x12f3c7bf0>]
VersionedUnpickler [<apptools.sweet_pickle.versioned_unpickler.VersionedUnpickler object at 0x1956b3710>] using Updater [<apptools.sweet_pickle.updater.Updater object at 0x12f3c7bf0>]
setting integration time = 0.524288
SetIntegrationTime 0.524288 ===>> OK
Mapping mass to dac mass func: "parabolic"
H1 map mass coeffs = [ -3.11428344e-04   1.33794662e-01   1.02868323e+00]
H1 map mass to dac 39.9624 >> 5.87809
GetDeflection H1 ===>> 0
GetHighVoltage ===>> 4500
do peak center. <pychron.spectrometer.jobs.peak_center.PeakCenter object at 0x1339449b0>
doing pc
starting peak center. center dac= 5.87809 step_width=0.001
width = 0.001
get scan parameters. half-width=0.015,window=0.015, i=0, scalar=1
Scan parameters center=5.87809 width=0.03000 (5.86309 - 5.89309)
Moving to starting dac 5.86309
setting magnet DAC
current  : 5.240202
requested: 5.863090
Delta Dac: 0.622888
Checking detector protection. dv=0.62289
Checking detector "CDD". Protection Threshold: 0.5 (V)
ProtectDetector CDD,On ===>> OK
GetDeflection CDD ===>> 2000
Protected = 2000
SetMagnetDAC 5.86309 ===>> OK
Magnet settling time: 0.500 0.500
Magnet settling complete
Wait for magnet to stop moving
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> False
Magnet move complete
Unprotect detectors
ProtectDetector CDD,Off ===>> OK
GetDeflection CDD ===>> 50
set_dac. change=True
Wait until signal near baseline. tol= 0.0431465555808. timeout= 10
Peak center failed to move to a baseline position
_do_sweep sm= 5.86309, em= 5.89309, stm= 0.001
calculated step values: start=5.86309, end=5.89309, width=0.001, nsteps=31.0
setting magnet DAC
current  : 5.863090
requested: 5.863090
Delta Dac: 0.000000
Checking detector protection. dv=0.00000
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.86309 ===>> OK
set_dac. change=False
setting magnet DAC
current  : 5.863090
requested: 5.864124
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.86412448276 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.864124
requested: 5.865159
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.86515896552 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.865159
requested: 5.866193
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.86619344828 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.866193
requested: 5.867228
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.86722793103 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.867228
requested: 5.868262
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.86826241379 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.868262
requested: 5.869297
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.86929689655 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.869297
requested: 5.870331
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87033137931 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.870331
requested: 5.871366
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87136586207 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.871366
requested: 5.872400
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87240034483 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.872400
requested: 5.873435
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87343482759 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.873435
requested: 5.874469
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87446931034 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.874469
requested: 5.875504
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.8755037931 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.875504
requested: 5.876538
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87653827586 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.876538
requested: 5.877573
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87757275862 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.877573
requested: 5.878607
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87860724138 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.878607
requested: 5.879642
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.87964172414 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.879642
requested: 5.880676
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.8806762069 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.880676
requested: 5.881711
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88171068966 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.881711
requested: 5.882745
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88274517241 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.882745
requested: 5.883780
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88377965517 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.883780
requested: 5.884814
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88481413793 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.884814
requested: 5.885849
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88584862069 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.885849
requested: 5.886883
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88688310345 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.886883
requested: 5.887918
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88791758621 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.887918
requested: 5.888952
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88895206897 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.888952
requested: 5.889987
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.88998655172 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.889987
requested: 5.891021
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.89102103448 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.891021
requested: 5.892056
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.89205551724 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
setting magnet DAC
current  : 5.892056
requested: 5.893090
Delta Dac: 0.001034
Checking detector protection. dv=0.00103
Checking detector "CDD". Protection Threshold: 0.5 (V)
SetMagnetDAC 5.89309 ===>> OK
Magnet settling time: 1.049 0.500
Magnet settling complete
set_dac. change=True
result of _do_sweep=True
_execute: Traceback (most recent call last):
  File "/Users/jan/Programming/git/pychron_dev/pychron/pyscripts/pyscript.py", line 360, in execute_snippet
    func(*argv)
  File "<string>", line 137, in main
  File "/Users/jan/Programming/git/pychron_dev/pychron/pyscripts/pyscript.py", line 88, in decorator
    return func(obj, *args, **kw)
  File "/Users/jan/Programming/git/pychron_dev/pychron/pyscripts/measurement_pyscript.py", line 371, in peak_center
    save=save, config_name=config_name)
  File "/Users/jan/Programming/git/pychron_dev/pychron/pyscripts/measurement_pyscript.py", line 883, in _automated_run_call
    return func(*args, **kw)
  File "/Users/jan/Programming/git/pychron_dev/pychron/experiment/automated_run/automated_run.py", line 627, in py_peak_center
    ion.do_peak_center(new_thread=False, save=save, message='automated run peakcenter', timeout=300)
  File "/Users/jan/Programming/git/pychron_dev/pychron/spectrometer/ion_optics/ion_optics_manager.py", line 170, in do_peak_center
    self._peak_center(*args)
  File "/Users/jan/Programming/git/pychron_dev/pychron/spectrometer/ion_optics/ion_optics_manager.py", line 358, in _peak_center
    dac_d = pc.get_peak_center()
  File "/Users/jan/Programming/git/pychron_dev/pychron/spectrometer/jobs/peak_center.py", line 113, in get_peak_center
    center, smart_shift, success = self.iteration(start, end, width)
  File "/Users/jan/Programming/git/pychron_dev/pychron/spectrometer/jobs/peak_center.py", line 216, in iteration
    result = self._calculate_peak_center(dac_values, intensities)
  File "/Users/jan/Programming/git/pychron_dev/pychron/spectrometer/jobs/peak_center.py", line 325, in _calculate_peak_center
    x, y = self._interpolate(x, y)
  File "/Users/jan/Programming/git/pychron_dev/pychron/spectrometer/jobs/peak_center.py", line 318, in _interpolate
    f = interpolate.interp1d(x, y, kind=self.interpolation_kind)
  File "/Users/jan/anaconda/envs/pychron_env/lib/python2.7/site-packages/scipy/interpolate/interpolate.py", line 414, in __init__
    _Interpolator1D.__init__(self, x, y, axis=axis)
  File "/Users/jan/anaconda/envs/pychron_env/lib/python2.7/site-packages/scipy/interpolate/polyint.py", line 61, in __init__
    self._set_yi(yi, xi=xi, axis=axis)
  File "/Users/jan/anaconda/envs/pychron_env/lib/python2.7/site-packages/scipy/interpolate/polyint.py", line 126, in _set_yi
    raise ValueError("x and y arrays must be equal in length along "
ValueError: x and y arrays must be equal in length along interpolation axis.

Post Measurement Started jan_pump_ms.py
08:33:11 -- ******* Post Measurement Started jan_pump_ms.py *******
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=3.00407409668e-05
Pumping spectrometer
open () {'name': 'O'}
open name=O desc=---
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open O ===>> OK
GetIndicatorState O ===>> OK
change switch state (True, True)
update switch state O True args=() kw={} ncanvase=2
08:33:11 -- OPEN   VALVE-O (Jan Ion Pump)
-------------------------- open O () result=[(True, True)]
action=open, ok=True, locked=[False]
executed snippet estimated_duration=0, duration=0.362153053284
jan_pump_ms.py completed successfully
setting _ms_pumptime
Post Measurement Finished
08:33:12 -- ******* Post Measurement Finished *******
----------------- finish -----------------
state changed from measurement to failed
----------------- stop -----------------
Measurement Finished unsuccessfully. Aborted=False
08:33:12 -- ******* Measurement Finished unsuccessfully. Aborted=False *******
failed execution step Measurement Failed
measurement did not complete successfully
08:33:12 -- Automated run 65792-97 failed duration: 366.492 s
----------------- finish -----------------
----------------- stop -----------------
finish run. runs completed=10
write rem/ex queues
/Users/jan/PychronDev/experiments/rem/Load1820.rem.txt
/Users/jan/PychronDev/experiments/rem/Load1820.ex.txt
doing event level: 3
add run
